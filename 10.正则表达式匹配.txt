const isMatch = (s, p) => {
  if (s == null || p == null) return false;

  const sLen = s.length, pLen = p.length;

  const dp = new Array(sLen + 1);
  for (let i = 0; i < dp.length; i++) {
    dp[i] = new Array(pLen + 1).fill(false); // 将项默认为false
  }
  // base case
  dp[0][0] = true;
  for (let j = 1; j < pLen + 1; j++) {
    if (p[j - 1] == "*") dp[0][j] = dp[0][j - 2];
  }
  // 迭代
  for (let i = 1; i < sLen + 1; i++) {
    for (let j = 1; j < pLen + 1; j++) {

      if (s[i - 1] == p[j - 1] || p[j - 1] == ".") {
        dp[i][j] = dp[i - 1][j - 1];
      } else if (p[j - 1] == "*") {
        if (s[i - 1] == p[j - 2] || p[j - 2] == ".") {
          dp[i][j] = dp[i][j - 2] || dp[i - 1][j - 2] || dp[i - 1][j];
        } else {
          dp[i][j] = dp[i][j - 2];
        }
      }
    }
  }
  return dp[sLen][pLen]; // 长sLen的s串 是否匹配 长pLen的p串
};

作者：xiao_ben_zhu
链接：https://leetcode-cn.com/problems/regular-expression-matching/solution/shou-hui-tu-jie-wo-tai-nan-liao-by-hyj8/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

/**
 * @param {string} s
 * @param {string} p
 * @return {boolean}
 */
var isMatch = function(s, p) {
    //如果s或p为空 则无法匹配
    if(s==null || p==null) return false;

    //找出s的长度和p的长度
    const sLen = s.length;
    const pLen = p.length;

    //利用动态规划，从右往左匹配，依次干掉相匹配的元素
    //创建二维数组，表示s（i）和p(j)是否匹配，不匹配则为false，匹配则只需是s(i-1)和p(j-1)匹配
    const dp =new Array(sLen+1);
    for(let i=0;i<dp.length;i++){
        dp[i] = new Array(pLen+1).fill(false);//初始状态默认为false
    }
    // 基础情况,s为空串，但p不为空串，要想匹配，只可能是右端是星号，它干掉一个字符后，把 p 变为空串。
    dp[0][0] = true;
    for(let j=1;j<pLen+1;j++){
        if(p[j-1]=="*") dp[0][j] = dp[0][j-2];
    }

    //迭代
    for(let i=1;i<sLen+1;i++){
        for(let j=1;j<pLen+1;j++){
            
            if(s[i-1]==p[j-1]||p[j-1]=="."){
                dp[i][j] = dp[i-1][j-1];
            }else if(p[j-1]=="*"){
                if(s[i-1]==p[j-2]||p[j-2]=="."){
                    dp[i][j] = dp[i][j-2] || dp[i-1][j-2] || dp[i-1][j];
                }else{
                    dp[i][j] = dp[i][j-2];
                }
            }
        }
    }
    return dp[sLen][pLen];// 长sLen的s串 是否匹配 长pLen的p串

};