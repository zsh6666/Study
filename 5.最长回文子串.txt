/**
 * @param {string} s
 * @return {string}
 */
var longestPalindrome = function(s) {
    //动态规划:s[i]===s[j] && dp[i+1][j-1]==true
    if(!s&&s.length==0) return "";
    let res = s[0] ; //保存最长回文子串
    const dp = []; //动态规划数组
    //循环判断,从尾部开始
    for(let i=s.length-1;i>=0;i--){
        dp[i] = [];//构造dp[][]二维数组
        for(let j=i;j<s.length;j++){
            //三种回文字符串的情况
            if(i===j){
                dp[i][j] = true; // 只有一个字符
            }else if(j-i===1&&s[i]===s[j]){
                dp[i][j] = true; //两个相连的字符相等
            }else if(s[i]===s[j] && dp[i+1][j-1]){
                dp[i][j] = true; //两边相等且内部是回文字符串
            }
            
            //如果有长度大于当前的res，将res替换为最长的子串
            if(dp[i][j] && j-i+1>res.length){
                res = s.slice(i,j+1); //分割字符串从i到j
            }
        }

    }
    return res;
};